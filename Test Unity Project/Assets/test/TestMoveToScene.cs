using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

// подключаем пространство имен, это мои собственные классы
// см. https://github.com/zolotov-av/unity
using Nanosoft;

/**
 * Пример перемещения персонажа (с полным сохранением его состояния) с одной
 * сцены на другую
 *
 * Данный скрипт для теста вещается на триггер
 */
public class TestMoveToScene: MonoBehaviour
{
	/**
	 * Имя сцены на которую надо переместить персонажа
	 *
	 * Делаем скрипт более-менее универсальным. Чтобы его можно использовать
	 * несколько раз. Чтобы создать такой "портал" достаточно создать объект,
	 * повесить на него триггер (коллайдер с включенной галочкой Is Trigger)
	 * и повесить этот скрипт. В скрипте указать имя сцены на которую надо
	 * переключиться.
	 */
	public string targetScene = "test-scene";
	
	/**
	 * Имя тега для поиска объекта, на месте которого должен появиться
	 * персонаж.
	 */
	public string entryPointTag = "EntryPoint";
	
	/**
	 * ссылка на GameObject персонажа
	 */
	private GameObject player;
	
	/**
	 * контроллер персонажа
	 */
	private DumbController controller;
	
	/**
	 * Обработчик триггера, тут мы сохраняем ссылку на персонажа (и нужные ему
	 * объекты) в свое поле. Отмечаем все объекты которые надо переместить
	 * на новую карту как неудаляемые.
	 */
	public void OnTriggerEnter(Collider other)
	{
		// игрок сталкивается с триггером, так ссылку на игрока получаем
		// из аргумента
		player = other.gameObject;
		
		// получим ссылку на скрипт, за одно проверим, это наш персожан
		// или что-то другое врезалось в триггер?
		controller = player.GetComponent<DumbController>();
		if ( !controller )
		{
			// у объекта нет нужного нам контроллера, значит это скорее
			// всего какой-то другой объект врезался в триггер, игнорируем его
			return;
		}
		
		// отмечаем персонажа, что его не надо удалять при загрузке новой сцены
		DontDestroyOnLoad(player);
		
		// в моем случае, к персонажу прикрепленна камера и её тоже надо
		// перемещать, так что я её тоже отмечаю что её не нужно удалять
		// при загрузке новой схемы
		DontDestroyOnLoad(controller.playerCamera);
		
		// просто отладочный вывод, пишем в лог имя нашего объетка-персонажа
		Debug.Log("gameObject ='" + other.gameObject.name + "'.");
		
		// опять же для отладки, в лог запишем имя старой сцены
		Scene scene = SceneManager.GetActiveScene();
		Debug.Log("Current scene is '" + scene.name + "'.");
		
		// добавляем обработчик загрузки сцены
		// OnSceneLoaded - это имя нашей функции которая будет вызвана
		// после загрузки новой сцены
		// Примечание: меня волнует вопрос утечек памяти, по идее триггер
		//    и этот скрипт удаляться после загрузки сцены, значит и обработчик
		//    надо наверное как-то удалить из сцены... или он удалиться сам?...
		SceneManager.sceneLoaded += OnSceneLoaded;
		
		// собственно загружаем новую сцену
		SceneManager.LoadScene(targetScene);
	}
	
	/**
	 * Обработчик загрузки новой сцены
	 *
	 * Вызывается когда новая сцена загружена, здесь мы перемещаем заранее
	 * подготовленные объекты на новую сцену
	 */
	public void OnSceneLoaded(Scene scene, LoadSceneMode mode)
	{
		// просто отладочный вывод, чтобы убедиться что метод был вызван
		Debug.Log("OnSceneLoaded: " + scene.name);
		
		// перемещаем персонажа на новую сцену
		SceneManager.MoveGameObjectToScene(player, scene);
		
		// В моем случае персонажу требуется ещё камера, её тоже надо
		// переместить на новую сцену. Или же, если мы не перемещаем камеру,
		// то возможно надо будет связать камеру и персонажа иным кодом...
		SceneManager.MoveGameObjectToScene(controller.playerCamera, scene);
		
		// по хорошему надо еще переместить персонажа в заданную точку
		// и правильно его развернуть. Для этого я сцене (которая новая)
		// создаю пустой GameObject и присваиваю ему тег EntryPoint чтобы
		// его потом можно было найти с помощью GameObject.FindWithTag().
		// Имя метки вы можете выбрать как вам нравиться или находить позицю
		// другим способом, или может быть даже непосредственно задавать
		// координаты в коде...
		//
		// Кстати это может быть не пустой объект, а например куб или какой-то
		// другой меш, чтобы его было хорошо видно при компоновке сцены,
		// а в момент переключения сцены, отключать рендер...
		GameObject entryPoint = GameObject.FindWithTag(entryPointTag);
		
		if ( !entryPoint )
		{
			// упс! мы не нашли объект, возможно мы забли присвоить объекту
			// метку. Бывает... напишем об этом в лог, чтобы было понятнее
			// в чем проблема
			Debug.Log("Object EntryPoint not found, check the Tag='" + entryPointTag + "'");
			return;
		}
		
		// перемещаем персонажа в точку где находиться объект EntryPoint
		player.transform.position = entryPoint.transform.position;
		
		// развернем персонажа, чтобы он был ориентирован в том же направлении,
		// что и объект EntryPoint
		player.transform.rotation = entryPoint.transform.rotation;
	}
}
